install_hasura_cli: &install_hasura_cli
  run:
    name: Install Hasura CLI
    command: |
      curl -L https://github.com/hasura/graphql-engine/raw/master/cli/get.sh | bash

install_awscli: &install_awscli
    run:
      name: Install awscli
      command: |
        sudo apt-get install python-pip python
        sudo pip install awscli

deploy_environment: &deploy_environment
  docker:
    - image: circleci/node:10-browsers

get_envars: &get_envars
    run:
      name: Get environment variables from AWS
      environment:
        ORG: "digitalefqm"
      command: |
        if [ "$CIRCLE_BRANCH" == "production" ]; then
            export AWS_DEFAULT_REGION=${PRODUCTION_AWS_REGION}
            export AWS_ACCESS_KEY_ID=${PRODUCTION_AWS_ACCESS_KEY_ID}
            export AWS_SECRET_ACCESS_KEY=${PRODUCTION_AWS_SECRET_ACCESS_KEY}
        else
            export AWS_DEFAULT_REGION=${STAGING_AWS_REGION}
            export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
            export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
        fi
        echo "export ORG=${ORG}" >> .env
        echo "export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}" >> .env
        echo "export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}" >> .env
        echo "export AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}" >> .env
        echo "export BUILD=${CIRCLE_BUILD_NUM}" >> .env
        echo "export GATSBY_GRAPHQL_API=$(aws ssm get-parameters --name /${ORG}/GATSBY_GRAPHQL_API --with-decryption --query Parameters[0].Value --output=text)" >> .env
        echo "export GATSBY_AWS_REGION=$(aws ssm get-parameters --name /${ORG}/GATSBY_AWS_REGION --with-decryption --query Parameters[0].Value --output=text)" >> .env
        echo "export GATSBY_AWS_COGNITO_IDENTITY_POOL_ID=$(aws ssm get-parameters --name /${ORG}/GATSBY_AWS_COGNITO_IDENTITY_POOL_ID --with-decryption --query Parameters[0].Value --output=text)" >> .env
        echo "export GATSBY_AWS_COGNITO_USER_POOL_ID=$(aws ssm get-parameters --name /${ORG}/GATSBY_AWS_COGNITO_USER_POOL_ID --with-decryption --query Parameters[0].Value --output=text)" >> .env
        echo "export GATSBY_AWS_COGNITO_USER_POOL_WEB_CLIENT_ID=$(aws ssm get-parameters --name /${ORG}/GATSBY_AWS_COGNITO_USER_POOL_WEB_CLIENT_ID --with-decryption --query Parameters[0].Value --output=text)" >> .env
        echo "export GATSBY_AWS_S3_BUCKET=$(aws ssm get-parameters --name /${ORG}/GATSBY_AWS_S3_BUCKET --with-decryption --query Parameters[0].Value --output=text)" >> .env
        echo "export HASURA_GRAPHQL_ENDPOINT=$(aws ssm get-parameters --name /${ORG}/HASURA_GRAPHQL_ENDPOINT --with-decryption --query Parameters[0].Value --output=text)" >> .env
        echo "export HASURA_GRAPHQL_ADMIN_SECRET=$(aws ssm get-parameters --name /${ORG}/HASURA_GRAPHQL_ADMIN_SECRET --with-decryption --query Parameters[0].Value --output=text)" >> .env
        echo "export ARTIFACTS_BUCKET=s3://$(aws ssm get-parameters --name /${ORG}/s3_deploy_artifacts --with-decryption --query Parameters[0].Value --output=text)" >> .env
        echo "export ASSESSBASE_BUCKET=s3://$(aws ssm get-parameters --name /${ORG}/assessbase_bucket --with-decryption --query Parameters[0].Value --output=text)" >> .env
        echo "export KNOWLEDGEBASE_BUCKET=s3://$(aws ssm get-parameters --name /${ORG}/knowledgebase_bucket --with-decryption --query Parameters[0].Value --output=text)" >> .env
        echo "export STORYBOOK_BUCKET=s3://$(aws ssm get-parameters --name /${ORG}/storybook_bucket --with-decryption --query Parameters[0].Value --output=text)" >> .env


load_envars: &load_envars
    run:
        name: Load environment variables
        command: |
          cat .env >> $BASH_ENV

version: 2
jobs:
  setup:
    <<: *deploy_environment
    steps:
    - checkout
    - *install_awscli
    - *get_envars
    - run:
        name: Install yarn deps
        command: yarn install --no-save
    - persist_to_workspace:
        root: .
        paths:
          - .
  build:
    <<: *deploy_environment
    steps:
      - attach_workspace:
          at: .
      - *load_envars
      - run:
          name: Lint code
          command: yarn run lint
      - run:
          name: Build bundles
          command: |
            set -e
            yarn run build
      - run:
          name: Build storybook bundle
          command: |
            set -e
            cd packages/components
            yarn run build-storybook -- --quiet
      - persist_to_workspace:
          root: .
          paths:
            - .
  test:
    <<: *deploy_environment
    steps:
      - attach_workspace:
          at: .
      - *load_envars
      - *install_hasura_cli
      - run:
          name: Test
          command: |
            set -e
            yarn test
  e2e:
    <<: *deploy_environment
    steps:
      - attach_workspace:
          at: .
      - *load_envars
      - run:
          name: Test e2e
          command: |
            set -e
            yarn run 'ci:e2e-test'
  deploy:
    <<: *deploy_environment
    steps:
      - attach_workspace:
          at: .
      - *load_envars
      - *install_awscli
      - run:
          name: Deploy assess-base bundle to S3
          command: aws s3 sync packages/assess-base/public ${ASSESSBASE_BUCKET} --delete --cache-control max-age=0,no-cache,no-store,must-revalidate
      - run:
          name: Deploy knowledge-base bundle to S3
          command: aws s3 sync packages/knowledge-base/public ${KNOWLEDGEBASE_BUCKET} --delete --cache-control max-age=0,no-cache,no-store,must-revalidate
      - run:
          name: Deploy storybook bundle to S3
          command: aws s3 sync packages/components/storybook-static ${STORYBOOK_BUCKET} --delete --cache-control max-age=0,no-cache,no-store,must-revalidate
      - run:
          name: Deploy jwt-enrichment-hook Lambda function
          command: |
            zip jwt-enrichment-hook.zip -FSj packages/functions/build/jwt-enrichment-hook.js
            aws lambda update-function-code --function-name rawsalmon_jwt_enrichment_hook --zip-file fileb://jwt-enrichment-hook.zip
      - run:
          name: Deploy signup-hook Lambda function
          command: |
            zip signup-hook.zip -FSj packages/functions/build/signup-hook.js
            aws lambda update-function-code --function-name rawsalmon_signup_hook --zip-file fileb://signup-hook.zip
  publish-artifacts:
    <<: *deploy_environment
    steps:
      - attach_workspace:
          at: .
      - *load_envars
      - run:
          name: Create artifacts
          command: |
            npm run artifact:create
      - run:
          name: Set artifact name envars
          command: |
            echo 'export ENRICHMENT_ARTIFACT="packages/functions/`cd packages/functions && yarn run artifact:name-enrichment-hook --silent`"' >> $BASH_ENV
            echo 'export SIGNUP_ARTIFACT="packages/functions/`cd packages/functions && yarn run artifact:name-signup-hook --silent`"' >> $BASH_ENV
            echo 'export HASURA_ARTIFACT="packages/`cd packages/hasura && yarn run artifact:name --silent`"' >> $BASH_ENV
            echo 'export ASSESS_BASE_ARTIFACT="packages/assess-base/`cd packages/assess-base && yarn run artifact:name --silent`"' >> $BASH_ENV
            echo 'export KNOWLEDGE_BASE_ARTIFACT="packages/knowledge-base/`cd packages/knowledge-base && yarn run artifact:name --silent`"' >> $BASH_ENV
            echo 'export ASSESS_BASE_HASURA_ARTIFACT="packages/`cd packages/assess-base-hasura && yarn run artifact:name --silent`"' >> $BASH_ENV
      - *install_awscli
      - run:
          name: Copy artifacts to S3 bucket
          command: |
            aws s3 cp ${ASSESS_BASE_ARTIFACT} ${ARTIFACTS_BUCKET}
            aws s3 cp ${KNOWLEDGE_BASE_ARTIFACT} ${ARTIFACTS_BUCKET}
            aws s3 cp ${ENRICHMENT_ARTIFACT} ${ARTIFACTS_BUCKET}
            aws s3 cp ${SIGNUP_ARTIFACT} ${ARTIFACTS_BUCKET}
            aws s3 cp ${HASURA_ARTIFACT} ${ARTIFACTS_BUCKET}
            aws s3 cp ${ASSESS_BASE_HASURA_ARTIFACT} ${ARTIFACTS_BUCKET}
  apply-hasura-migrations:
    <<: *deploy_environment
    steps:
      - attach_workspace:
          at: .
      - *install_hasura_cli
      - *load_envars
      - run:
          name: Apply Hasura migrations
          command: |
            hasura migrate apply --project packages/hasura
      - run:
          name: Apply Assess-base Hasura migrations
          command: |
            hasura migrate apply --project packages/assess-base-hasura
      - run:
          name: Seed DB with data
          command: |
            export HASURA_GRAPHQL_API=${GATSBY_GRAPHQL_API}
            cd packages/hasura
            yarn run seed
workflows:
  version: 2
  build-only:
    jobs:
      - setup:
          filters:
            branches:
              ignore:
                - staging
                - production
      - build:
          requires:
            - setup
      - test:
          requires:
            - build
      - e2e:
          filters:
            branches:
              only:
                - e2e-test
          requires:
            - build
  build-and-deploy:
    jobs:
      - setup:
          filters:
            branches:
              only:
                - staging
                - production
      - apply-hasura-migrations:
          requires:
            - setup
      - build:
          requires:
            - apply-hasura-migrations
      - test:
          requires:
            - build
      - e2e:
          filters:
            branches:
              only:
                - e2e-test
          requires:
            - build
      - deploy:
          requires:
            - test
      - publish-artifacts:
          requires:
            - test
